@startuml th_get_image_mod

skinparam monochrome true

floating note left  
    Proposition modif modelisation

    arena shared var 

    Fermeture de la camera dans ce thread ==> attente de la fin des calculs lors du stop


    Variables : 
        sendImages : bool
end note

start

while ( )

    :démarrerCamera?;
    note : sync sémaphore

    :err = camera.Open();
    if(err) then (camera_ok)
    
    :msg = new Message(MESSAGE_ANSWER_ACK);
    :msgToMon!msg;

    :sendImages = true;

    while (sendImages) is (true)
    if(eventStopCamera) then (false)
    :startEnvoi?;
    note 
        sync sur sémaphore 
        pe modifier pour que th calib récupère startCam
        pour factor
    end note

    :timeStart = now();

    :computePosLoc = computePosShared;
    
    :img = Camera::Grab();

    if (computePosLoc) then (true)
        'partition computePos {
            :pos = Img::SearchRobot(img,arena);
            if (pos) then 
                :msg = MessagePosition(pos);
            else (null)
                :pos = (-1;-1)
                :msg = MessagePosition(pos);
            endif
            :msgToMon!msg;
        '}
    else (false)

    endif

    :msgToMon!img;   

    :wait (100ms - (now() - timeStart); 
    note
        compute elapsed time since start 
        if precision needed
    end note
    'event stopCamera reçu
    else (true)
        :err = camera.Close();
        if(err) then (camera_closed)
            :sendImages = false;
            :msg = new Message(MESSAGE_ANSWER_ACK);
        else
            :msg = new Message(MESSAGE_ANSWER_NACK);
        endif
        :mstToMon!msg;
    endif
    endwhile (false)

    else (!camera_ok)

    :msg = new Message(MESSAGE_ANSWER_ACK);
    :msgToMon!msg;
    endif
endwhile 

stop

@enduml
